
@Component
public class SearchFieldLabelMap {

    private Map<String, String> fieldMap = new LinkedHashMap<>(); // È†ÜÂ∫èÁ∂≠ÊåÅ„Åó„Åü„ÅÑÂ†¥Âêà

    @PostConstruct
    public void load() throws IOException {
        Resource resource = new ClassPathResource("static/config/search-fields.csv");
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(resource.getInputStream(), StandardCharsets.UTF_8))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",", 2);
                if (parts.length == 2) {
                    fieldMap.put(parts[0].trim(), parts[1].trim());
                }
            }
        }
    }

    public Map<String, String> getFieldMap() {
        return fieldMap;
    }

    public String getLabel(String key) {
        return fieldMap.getOrDefault(key, key);
    }

    public String getKeyByLabel(String label) {
        return fieldMap.entrySet().stream()
            .filter(e -> e.getValue().equals(label))
            .map(Map.Entry::getKey)
            .findFirst()
            .orElse(label);
    }
}

async function loadFieldLabelMap() {
  const res = await fetch('/static/config/search-fields.csv');
  const text = await res.text();

  const lines = text.trim().split('\n');
  const map = {};

  lines.forEach(line => {
    const [key, label] = line.split(',');
    if (key && label) {
      map[key.trim()] = label.trim();
    }
  });

  return map;
}


// -----------------------------
// üîπ „Ç∞„É≠„Éº„Éê„É´„Éû„ÉÉ„Éó„ÅÆÂÆöÁæ©
// -----------------------------
let fieldLabelMap = {};

// -----------------------------
// üîπ CSV„ÇíË™≠„ÅøËæº„Çì„Åß„Éû„ÉÉ„Éó„Å´Ê†ºÁ¥ç
// -----------------------------
function loadFieldLabelMap() {
  return fetch('/static/config/search-fields.csv')
    .then(res => res.text())
    .then(text => {
      const lines = text.trim().split('\n');
      lines.forEach(line => {
        const [key, label] = line.split(',');
        if (key && label) {
          fieldLabelMap[key.trim()] = label.trim();
        }
      });
    });
}

// -----------------------------
// üîπ „Ç≠„Éº„Åã„ÇâË°®Á§∫Âêç„ÇíÂèñÂæó
// -----------------------------
function getLabelByKey(key) {
  return fieldLabelMap[key] || key;
}

// -----------------------------
// üîπ Ë°®Á§∫Âêç„Åã„Çâ„Ç≠„Éº„ÇíÂèñÂæó
// -----------------------------
function getKeyByLabel(label) {
  return Object.keys(fieldLabelMap).find(k => fieldLabelMap[k] === label) || label;
}

// -----------------------------
// üîπ DOMÊèèÁîªÂæå„Å´ÂàùÊúüÂåñÔºà‰æãÔºâ
// -----------------------------
window.addEventListener('DOMContentLoaded', async () => {
  await loadFieldLabelMap();

  // Ë™≠„ÅøËæº„Åæ„Çå„Åü„ÅÇ„Å®„Åß‰Ωø„Åà„Çã
  console.log(getLabelByKey("projectId"));   // ‚Üí "„Éó„É≠„Ç∏„Çß„ÇØ„ÉàID"
  console.log(getKeyByLabel("ÈñãÂßãÊó•"));      // ‚Üí "startDate"
});


<select id="advancedSearchProjects" parameterType="com.pasco.projecttracker.dto.AdvancedSearchForm" resultType="com.pasco.projecttracker.dto.SearchResult">
  SELECT DISTINCT p.*
  FROM projects p
  LEFT JOIN wbs w ON p.project_id = w.project_id
  LEFT JOIN engineers e ON w.wbs_no = e.wbs_no
  <where>
    <foreach collection="fields" item="field" index="i">
      <choose>
        <when test="inputTypes[i] == 'text'">
          <choose>
            <when test="comparisons[i] == 'contains'">
              ${field} LIKE CONCAT('%', #{values[${i}]}, '%')
            </when>
            <when test="comparisons[i] == 'startsWith'">
              ${field} LIKE CONCAT(#{values[${i}]}, '%')
            </when>
            <when test="comparisons[i] == 'endsWith'">
              ${field} LIKE CONCAT('%', #{values[${i}]})
            </when>
            <when test="comparisons[i] == 'equals'">
              ${field} = #{values[${i}]}
            </when>
          </choose>
        </when>
        <when test="inputTypes[i] == 'number' or inputTypes[i] == 'date'">
          <choose>
            <when test="comparisons[i] == 'equals'">
              ${field} = #{values[${i}]}
            </when>
            <when test="comparisons[i] == 'greater'">
              ${field} &gt; #{values[${i}]}
            </when>
            <when test="comparisons[i] == 'less'">
              ${field} &lt; #{values[${i}]}
            </when>
            <when test="comparisons[i] == 'greaterOrEqual'">
              ${field} &gt;= #{values[${i}]}
            </when>
            <when test="comparisons[i] == 'lessOrEqual'">
              ${field} &lt;= #{values[${i}]}
            </when>
          </choose>
        </when>
        <when test="inputTypes[i] == 'boolean'">
          ${field} = #{values[${i}]}
        </when>
      </choose>
      <if test="i > 0">
        ${operators[i-1]}
      </if>
    </foreach>
  </where>
</select>

